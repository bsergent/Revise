/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.challengercity.revise;

import java.util.ArrayList;
import java.io.File;
import java.io.FileOutputStream;
import net.minecraft.src.*;
import java.awt.FontMetrics;
import java.io.FileInputStream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import java.awt.*;
import java.io.*;
import javax.swing.ImageIcon;

/**
 *
 * @author Ben
 */
public class ReviseMain extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    public ReviseMain() {
        try {
            mcFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("/com/challengercity/revise/resources/minecraft_font.ttf"));
            
            mcFont12 = mcFont.deriveFont(12f);
            mcFont16 = mcFont.deriveFont(16f);
            mcFont24 = mcFont.deriveFont(24f);
        } catch (Exception ex) {
            ex.printStackTrace();
            setTitle("Revise - Font did not load");
        }
        initComponents();
        metrics = this.getGraphics().getFontMetrics(mcFont16);
        previousPage.hide();
        //colorPanel.hide();
        pages.add(pageContents.getText());
        //loadButton.requestFocus();
        saveMenuItem.setEnabled(false);
        saveBookMenuItem.setEnabled(false);
        exportMenuItem.setEnabled(false);
        backgrounds = new ImageIcon[5];
        textFileBook = false;
        textFileBookIcon.hide();
        backgrounds[0] = new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/backgrounds/0.png"));
        backgrounds[1] = new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/backgrounds/1.png"));
        backgrounds[2] = new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/backgrounds/2.png"));
        backgrounds[3] = new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/backgrounds/3.png"));
        backgrounds[4] = new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/backgrounds/4.png"));
        prefs = java.util.prefs.Preferences.userRoot();
        prefs = prefs.node("com.challengercity.revise.prefs");
        // com.sun.awt.AWTUtilities.setWindowOpacity(this, 0.75f); TODO Do window per-pixel translucency!
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutDialog = new javax.swing.JDialog();
        aboutDialogTitleLabel = new javax.swing.JLabel();
        aboutDialogScrollPane = new javax.swing.JScrollPane();
        aboutDialogInfoTextArea = new javax.swing.JTextArea();
        aboutDialogWebButton = new javax.swing.JButton();
        aboutDialogBackgroundLabel = new javax.swing.JLabel();
        addToTitle = new javax.swing.JToggleButton();
        addToAuthor = new javax.swing.JToggleButton();
        addToPage = new javax.swing.JToggleButton();
        playerToggle = new javax.swing.JToggleButton();
        resetButton = new javax.swing.JButton();
        colorButtonToggle = new javax.swing.JToggleButton();
        randomButton = new javax.swing.JButton();
        underlineButton = new javax.swing.JButton();
        strikeButton = new javax.swing.JButton();
        italicButton = new javax.swing.JButton();
        boldButton = new javax.swing.JButton();
        textFileBookIcon = new javax.swing.JLabel();
        ingameToggle = new javax.swing.JToggleButton();
        nextPage = new javax.swing.JButton();
        previousPage = new javax.swing.JButton();
        pageNumber = new javax.swing.JLabel();
        removePageButton = new javax.swing.JButton();
        limitLabel = new javax.swing.JLabel();
        pageContents = new javax.swing.JTextPane();
        bookTitle = new javax.swing.JTextField();
        bookAuthor = new javax.swing.JTextField();
        background = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        newBookMenuItem = new javax.swing.JMenuItem();
        loadBookMenuItem = new javax.swing.JMenuItem();
        saveBookMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        findMenuItem = new javax.swing.JMenuItem();
        clientMenu = new javax.swing.JMenu();
        clientPasteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        aboutDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        aboutDialog.setTitle("About");
        aboutDialog.setAlwaysOnTop(true);
        aboutDialog.setLocationByPlatform(true);
        aboutDialog.setMinimumSize(new java.awt.Dimension(511, 308));
        aboutDialog.setName("aboutDialog");
        aboutDialog.getContentPane().setLayout(null);

        aboutDialogTitleLabel.setFont(mcFont24);
        aboutDialogTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutDialogTitleLabel.setText("About Revise");
        aboutDialog.getContentPane().add(aboutDialogTitleLabel);
        aboutDialogTitleLabel.setBounds(45, 30, 420, 30);

        aboutDialogScrollPane.setBorder(null);

        aboutDialogInfoTextArea.setBackground(new java.awt.Color(250, 240, 214));
        aboutDialogInfoTextArea.setColumns(20);
        aboutDialogInfoTextArea.setEditable(false);
        aboutDialogInfoTextArea.setFont(mcFont12);
        aboutDialogInfoTextArea.setRows(5);
        aboutDialogInfoTextArea.setText("Sergent-Tech 2012Â©\nNew To This Version:\n+Support for French accent characters\n+Remembers last save directory\n*Format codes show up correctly\n\nMinecraftia Font by Andrew Tyler www.AndrewTyler.net\n");
        aboutDialogInfoTextArea.setBorder(null);
        aboutDialogScrollPane.setViewportView(aboutDialogInfoTextArea);

        aboutDialog.getContentPane().add(aboutDialogScrollPane);
        aboutDialogScrollPane.setBounds(50, 60, 400, 150);

        aboutDialogWebButton.setText("Minecraft Forums Post");
        aboutDialogWebButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutDialogWebButtonActionPerformed(evt);
            }
        });
        aboutDialog.getContentPane().add(aboutDialogWebButton);
        aboutDialogWebButton.setBounds(50, 230, 170, 29);

        aboutDialogBackgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SmallBookBackground.png"))); // NOI18N
        aboutDialogBackgroundLabel.setSize(new java.awt.Dimension(511, 288));
        aboutDialog.getContentPane().add(aboutDialogBackgroundLabel);
        aboutDialogBackgroundLabel.setBounds(0, 0, 511, 288);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Revise - Untitled");
        setBounds(new java.awt.Rectangle(0, 22, 511, 675));
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(511, 675));
        setMinimumSize(new java.awt.Dimension(511, 675));
        setPreferredSize(new java.awt.Dimension(511, 675));
        getContentPane().setLayout(null);

        addToTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/T.png"))); // NOI18N
        addToTitle.setToolTipText("Add to formatting to title");
        addToTitle.setBorderPainted(false);
        addToTitle.setContentAreaFilled(false);
        addToTitle.setMaximumSize(new java.awt.Dimension(16, 16));
        addToTitle.setMinimumSize(new java.awt.Dimension(16, 16));
        addToTitle.setPreferredSize(new java.awt.Dimension(16, 16));
        addToTitle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/TS.png"))); // NOI18N
        addToTitle.setSize(new java.awt.Dimension(16, 16));
        addToTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToTitleActionPerformed(evt);
            }
        });
        getContentPane().add(addToTitle);
        addToTitle.setBounds(280, 610, 16, 16);

        addToAuthor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/A.png"))); // NOI18N
        addToAuthor.setToolTipText("Add to formatting to author");
        addToAuthor.setBorderPainted(false);
        addToAuthor.setContentAreaFilled(false);
        addToAuthor.setMaximumSize(new java.awt.Dimension(16, 16));
        addToAuthor.setMinimumSize(new java.awt.Dimension(16, 16));
        addToAuthor.setPreferredSize(new java.awt.Dimension(16, 16));
        addToAuthor.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/AS.png"))); // NOI18N
        addToAuthor.setSize(new java.awt.Dimension(16, 16));
        addToAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToAuthorActionPerformed(evt);
            }
        });
        getContentPane().add(addToAuthor);
        addToAuthor.setBounds(300, 610, 16, 16);

        addToPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/P.png"))); // NOI18N
        addToPage.setSelected(true);
        addToPage.setToolTipText("Add to formatting to page");
        addToPage.setBorderPainted(false);
        addToPage.setContentAreaFilled(false);
        addToPage.setMaximumSize(new java.awt.Dimension(16, 16));
        addToPage.setMinimumSize(new java.awt.Dimension(16, 16));
        addToPage.setPreferredSize(new java.awt.Dimension(16, 16));
        addToPage.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/PS.png"))); // NOI18N
        addToPage.setSize(new java.awt.Dimension(16, 16));
        addToPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToPageActionPerformed(evt);
            }
        });
        getContentPane().add(addToPage);
        addToPage.setBounds(320, 610, 16, 16);

        playerToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Formatting.png"))); // NOI18N
        playerToggle.setBorderPainted(false);
        playerToggle.setContentAreaFilled(false);
        playerToggle.setPreferredSize(new java.awt.Dimension(100, 30));
        playerToggle.setRequestFocusEnabled(false);
        getContentPane().add(playerToggle);
        playerToggle.setBounds(330, 580, 100, 20);

        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Reset.png"))); // NOI18N
        resetButton.setToolTipText("Reset Formatting");
        resetButton.setBorderPainted(false);
        resetButton.setContentAreaFilled(false);
        resetButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/ResetS.png"))); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetButton);
        resetButton.setBounds(460, 600, 20, 30);

        colorButtonToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Color.png"))); // NOI18N
        colorButtonToggle.setToolTipText("Colors");
        colorButtonToggle.setBorder(null);
        colorButtonToggle.setBorderPainted(false);
        colorButtonToggle.setContentAreaFilled(false);
        colorButtonToggle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/ColorS.png"))); // NOI18N
        colorButtonToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorButtonToggleActionPerformed(evt);
            }
        });
        getContentPane().add(colorButtonToggle);
        colorButtonToggle.setBounds(440, 600, 20, 29);

        randomButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Random.png"))); // NOI18N
        randomButton.setToolTipText("Random");
        randomButton.setBorderPainted(false);
        randomButton.setContentAreaFilled(false);
        randomButton.setRolloverEnabled(true);
        randomButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/RandomS.png"))); // NOI18N
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });
        getContentPane().add(randomButton);
        randomButton.setBounds(420, 600, 20, 30);

        underlineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Underline.png"))); // NOI18N
        underlineButton.setToolTipText("Underline");
        underlineButton.setBorderPainted(false);
        underlineButton.setContentAreaFilled(false);
        underlineButton.setRolloverEnabled(true);
        underlineButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/UnderlineS.png"))); // NOI18N
        underlineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                underlineButtonActionPerformed(evt);
            }
        });
        getContentPane().add(underlineButton);
        underlineButton.setBounds(400, 600, 20, 30);

        strikeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Strike.png"))); // NOI18N
        strikeButton.setToolTipText("Strike-Out");
        strikeButton.setBorderPainted(false);
        strikeButton.setContentAreaFilled(false);
        strikeButton.setRolloverEnabled(true);
        strikeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/StrikeS.png"))); // NOI18N
        strikeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strikeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(strikeButton);
        strikeButton.setBounds(380, 600, 20, 30);

        italicButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Italic.png"))); // NOI18N
        italicButton.setToolTipText("Italics");
        italicButton.setBorderPainted(false);
        italicButton.setContentAreaFilled(false);
        italicButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/ItalicS.png"))); // NOI18N
        italicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicButtonActionPerformed(evt);
            }
        });
        getContentPane().add(italicButton);
        italicButton.setBounds(360, 600, 20, 30);

        boldButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Bold.png"))); // NOI18N
        boldButton.setToolTipText("Bold");
        boldButton.setBorder(null);
        boldButton.setBorderPainted(false);
        boldButton.setContentAreaFilled(false);
        boldButton.setRolloverEnabled(true);
        boldButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/BoldS.png"))); // NOI18N
        boldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldButtonActionPerformed(evt);
            }
        });
        getContentPane().add(boldButton);
        boldButton.setBounds(340, 600, 20, 30);

        textFileBookIcon.setBackground(new java.awt.Color(150, 61, 61));
        textFileBookIcon.setForeground(new java.awt.Color(185, 177, 158));
        textFileBookIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/InvGUI/TextFileBook.png"))); // NOI18N
        textFileBookIcon.setToolTipText("McBook");
        getContentPane().add(textFileBookIcon);
        textFileBookIcon.setBounds(20, 600, 20, 30);

        ingameToggle.setBackground(new java.awt.Color(150, 61, 61));
        ingameToggle.setFont(mcFont12);
        ingameToggle.setForeground(new java.awt.Color(185, 177, 158));
        ingameToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Signed.png"))); // NOI18N
        ingameToggle.setToolTipText("Signed - Not ingame editable");
        ingameToggle.setBorderPainted(false);
        ingameToggle.setContentAreaFilled(false);
        ingameToggle.setRolloverEnabled(true);
        ingameToggle.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Signed.png"))); // NOI18N
        ingameToggle.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Ingame.png"))); // NOI18N
        ingameToggle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Ingame.png"))); // NOI18N
        ingameToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingameToggleActionPerformed(evt);
            }
        });
        getContentPane().add(ingameToggle);
        ingameToggle.setBounds(30, 600, 40, 30);

        nextPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/RightW.png"))); // NOI18N
        nextPage.setToolTipText("Next Page");
        nextPage.setBorderPainted(false);
        nextPage.setContentAreaFilled(false);
        nextPage.setMaximumSize(new java.awt.Dimension(73, 45));
        nextPage.setMinimumSize(new java.awt.Dimension(73, 45));
        nextPage.setPreferredSize(new java.awt.Dimension(73, 45));
        nextPage.setRolloverEnabled(true);
        nextPage.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/RightR.png"))); // NOI18N
        nextPage.setSize(new java.awt.Dimension(73, 45));
        nextPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageActionPerformed(evt);
            }
        });
        getContentPane().add(nextPage);
        nextPage.setBounds(360, 540, 73, 45);

        previousPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/LeftW.png"))); // NOI18N
        previousPage.setToolTipText("Previous Page");
        previousPage.setBorderPainted(false);
        previousPage.setContentAreaFilled(false);
        previousPage.setMaximumSize(new java.awt.Dimension(73, 45));
        previousPage.setMinimumSize(new java.awt.Dimension(73, 45));
        previousPage.setPreferredSize(new java.awt.Dimension(73, 45));
        previousPage.setRolloverEnabled(true);
        previousPage.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/LeftR.png"))); // NOI18N
        previousPage.setSize(new java.awt.Dimension(73, 45));
        previousPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousPageActionPerformed(evt);
            }
        });
        getContentPane().add(previousPage);
        previousPage.setBounds(70, 540, 73, 45);

        pageNumber.setFont(mcFont24);
        pageNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pageNumber.setText("Page 1 of 1");
        pageNumber.setToolTipText("Current Page");
        getContentPane().add(pageNumber);
        pageNumber.setBounds(220, 50, 240, 30);

        removePageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/RemoveW.png"))); // NOI18N
        removePageButton.setToolTipText("Remove Page");
        removePageButton.setBorder(null);
        removePageButton.setBorderPainted(false);
        removePageButton.setContentAreaFilled(false);
        removePageButton.setRolloverEnabled(true);
        removePageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/RemoveR.png"))); // NOI18N
        removePageButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/RemoveR.png"))); // NOI18N
        removePageButton.setSize(new java.awt.Dimension(35, 35));
        removePageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePageButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removePageButton);
        removePageButton.setBounds(430, 80, 35, 35);

        limitLabel.setFont(mcFont12);
        limitLabel.setForeground(new java.awt.Color(185, 177, 158));
        limitLabel.setText("# Char.");
        getContentPane().add(limitLabel);
        limitLabel.setBounds(70, 606, 210, 20);

        pageContents.setBackground(new java.awt.Color(250, 240, 214));
        pageContents.setBorder(null);
        pageContents.setContentType("text/html");
        pageContents.setEditable(false);
        pageContents.setFont(mcFont.deriveFont(25f));
        pageContents.setBounds(new java.awt.Rectangle(50, 120, 400, 470));
        pageContents.setSelectionColor(new java.awt.Color(124, 42, 42));
        getContentPane().add(pageContents);
        pageContents.setBounds(50, 120, 400, 470);

        bookTitle.setBackground(new java.awt.Color(250, 240, 214));
        bookTitle.setColumns(16);
        bookTitle.setFont(mcFont24);
        bookTitle.setToolTipText("Book Title");
        bookTitle.setAutoscrolls(false);
        bookTitle.setBorder(null);
        bookTitle.setSelectionColor(new java.awt.Color(124, 42, 42));
        bookTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookTitleKeyReleased(evt);
            }
        });
        getContentPane().add(bookTitle);
        bookTitle.setBounds(50, 30, 240, 30);

        bookAuthor.setBackground(new java.awt.Color(250, 240, 214));
        bookAuthor.setColumns(16);
        bookAuthor.setFont(mcFont24);
        bookAuthor.setToolTipText("Book Author");
        bookAuthor.setAutoscrolls(false);
        bookAuthor.setBorder(null);
        bookAuthor.setSelectionColor(new java.awt.Color(124, 42, 42));
        bookAuthor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookAuthorKeyReleased(evt);
            }
        });
        getContentPane().add(bookAuthor);
        bookAuthor.setBounds(50, 60, 180, 30);

        background.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/BookBackground.png"))); // NOI18N
        background.setFocusable(false);
        background.setRequestFocusEnabled(false);
        background.setSize(new java.awt.Dimension(511, 630));
        getContentPane().add(background);
        background.setBounds(0, 0, 511, 630);

        fileMenu.setText("File");
        fileMenu.setToolTipText("Create new McBook file");

        loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Load.png"))); // NOI18N
        loadMenuItem.setText("Load");
        loadMenuItem.setToolTipText("Load a book from your world");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Save.png"))); // NOI18N
        saveMenuItem.setText("Save");
        saveMenuItem.setToolTipText("Save a book to your world");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        newBookMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Ingame.png"))); // NOI18N
        newBookMenuItem.setText("New .mcbook");
        newBookMenuItem.setToolTipText("Create new .mcbook");
        newBookMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBookMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newBookMenuItem);

        loadBookMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Ingame.png"))); // NOI18N
        loadBookMenuItem.setText("Load .mcbook");
        loadBookMenuItem.setToolTipText("Load a book from a .mcbook file");
        loadBookMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBookMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadBookMenuItem);

        saveBookMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Ingame.png"))); // NOI18N
        saveBookMenuItem.setText("Save .mcbook");
        saveBookMenuItem.setToolTipText("Save a book to a .mcbook file");
        saveBookMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBookMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveBookMenuItem);

        exportMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Export.png"))); // NOI18N
        exportMenuItem.setText("Export to world");
        exportMenuItem.setToolTipText("Export book into a world");
        exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportMenuItem);

        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Bookshelf.png"))); // NOI18N
        jMenuItem6.setText("Upload to MCLibrary");
        jMenuItem6.setToolTipText("Upload book to the MCLibrary");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem6);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/Exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/New.png"))); // NOI18N
        newMenuItem.setText("Clear");
        newMenuItem.setToolTipText("Clear the book, title, and author");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(newMenuItem);

        pasteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/TextIcon.png"))); // NOI18N
        pasteMenuItem.setText("Smart Paster");
        pasteMenuItem.setToolTipText("Paste in an entire text file and have Revise sort it into pages for you");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        jMenuItem8.setText("Toggle MC Restraints");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem8);

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItem1.setText("Toggle Preview Pane");
        jCheckBoxMenuItem1.setEnabled(false);
        editMenu.add(jCheckBoxMenuItem1);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Toggle Formatting");
        jMenuItem1.setEnabled(false);
        editMenu.add(jMenuItem1);

        jMenuItem7.setText("Copy Book to Clipboard");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem7);

        jMenuItem2.setText("Rearrange Pages");
        jMenuItem2.setEnabled(false);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem2);

        findMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findMenuItem.setText("Find in Book");
        findMenuItem.setEnabled(false);
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(findMenuItem);

        jMenuBar1.add(editMenu);

        clientMenu.setText("ClientPasting");

        clientPasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        clientPasteMenuItem.setText("Paste Book to MC");
        clientPasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientPasteMenuItemActionPerformed(evt);
            }
        });
        clientMenu.add(clientPasteMenuItem);

        jMenuBar1.add(clientMenu);

        helpMenu.setText("Help");

        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem3);

        jMenuItem4.setText("Report Bug");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem4);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        LoadOptionFrame loadOptionFrame = new LoadOptionFrame(this);
        loadOptionFrame.setVisible(true);
        saveBookMenuItem.setEnabled(true);
        exportMenuItem.setEnabled(true);
        //loadButton.hide();
        repaint();
    }//GEN-LAST:event_loadMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void nextPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPageActionPerformed
        currentPage++;
        if (currentPage >= pages.size()) {
            pages.add("");
        }
        updatePageNumber();
        updatePageText();
        pageContents.requestFocus();
    }//GEN-LAST:event_nextPageActionPerformed

    private void previousPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousPageActionPerformed
        if (currentPage > 0) {
            currentPage--;
        }
        updatePageNumber();
        updatePageText();
        pageContents.requestFocus();
    }//GEN-LAST:event_previousPageActionPerformed

    private ImageIcon randomBackground() {
        return backgrounds[currentPage % 5];
    }
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (!textFileBook) {
            checkSaveOverwrite();
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        clear(true);
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void bookTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookTitleKeyReleased
        title = bookTitle.getText();
        setTitle("Revise - " + title);
    }//GEN-LAST:event_bookTitleKeyReleased

    private void bookAuthorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookAuthorKeyReleased
        author = bookAuthor.getText();
    }//GEN-LAST:event_bookAuthorKeyReleased
    
    private void boldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldButtonActionPerformed
        if (addToTitle.isSelected()) {
            bookTitle.setText(bookTitle.getText() + "Â§l");
            bookTitle.requestFocus();
            title = bookTitle.getText();
        } else if (addToAuthor.isSelected()) {
            bookAuthor.setText(bookAuthor.getText() + "Â§l");
            bookAuthor.requestFocus();
            author = bookAuthor.getText();
        } else if (addToPage.isSelected()) {
            //pageContents.insert("Â§l" , pageContents.getCaretPosition());
            pages.set(currentPage, pageContents.getText());
            pageContents.requestFocus();
        }
        colorButtonToggle.setSelected(false);
        //colorPanel.hide();
        repaint();
    }//GEN-LAST:event_boldButtonActionPerformed

    private void italicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicButtonActionPerformed
        if (addToTitle.isSelected()) {
            bookTitle.setText(bookTitle.getText() + "Â§o");
            bookTitle.requestFocus();
            title = bookTitle.getText();
        } else if (addToAuthor.isSelected()) {
            bookAuthor.setText(bookAuthor.getText() + "Â§o");
            bookAuthor.requestFocus();
            author = bookAuthor.getText();
        } else if (addToPage.isSelected()) {
            //pageContents.insert("Â§o" , pageContents.getCaretPosition());
            pages.set(currentPage, pageContents.getText());
            pageContents.requestFocus();
        }
        colorButtonToggle.setSelected(false);
        //colorPanel.hide();
        repaint();
    }//GEN-LAST:event_italicButtonActionPerformed

    private void strikeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strikeButtonActionPerformed
        if (addToTitle.isSelected()) {
            bookTitle.setText(bookTitle.getText() + "Â§m");
            bookTitle.requestFocus();
            title = bookTitle.getText();
        } else if (addToAuthor.isSelected()) {
            bookAuthor.setText(bookAuthor.getText() + "Â§m");
            bookAuthor.requestFocus();
            author = bookAuthor.getText();
        } else if (addToPage.isSelected()) {
            //pageContents.insert("Â§m" , pageContents.getCaretPosition());
            pages.set(currentPage, pageContents.getText());
            pageContents.requestFocus();
        }
        colorButtonToggle.setSelected(false);
        //colorPanel.hide();
        repaint();
    }//GEN-LAST:event_strikeButtonActionPerformed

    private void underlineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_underlineButtonActionPerformed
        if (addToTitle.isSelected()) {
            bookTitle.setText(bookTitle.getText() + "Â§n");
            bookTitle.requestFocus();
            title = bookTitle.getText();
        } else if (addToAuthor.isSelected()) {
            bookAuthor.setText(bookAuthor.getText() + "Â§n");
            bookAuthor.requestFocus();
            author = bookAuthor.getText();
        } else if (addToPage.isSelected()) {
            //pageContents.insert("Â§n" , pageContents.getCaretPosition());
            pages.set(currentPage, pageContents.getText());
            pageContents.requestFocus();
        }
        colorButtonToggle.setSelected(false);
        //colorPanel.hide();
        repaint();
    }//GEN-LAST:event_underlineButtonActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        if (addToTitle.isSelected()) {
            bookTitle.setText(bookTitle.getText() + "Â§k");
            bookTitle.requestFocus();
            title = bookTitle.getText();
        } else if (addToAuthor.isSelected()) {
            bookAuthor.setText(bookAuthor.getText() + "Â§k");
            bookAuthor.requestFocus();
            author = bookAuthor.getText();
        } else if (addToPage.isSelected()) {
            //pageContents.insert("Â§k" , pageContents.getCaretPosition());
            pages.set(currentPage, pageContents.getText());
            pageContents.requestFocus();
        }
        colorButtonToggle.setSelected(false);
        //colorPanel.hide();
        repaint();
    }//GEN-LAST:event_randomButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        if (addToTitle.isSelected()) {
            bookTitle.setText(bookTitle.getText() + "Â§r");
            bookTitle.requestFocus();
            title = bookTitle.getText();
        } else if (addToAuthor.isSelected()) {
            bookAuthor.setText(bookAuthor.getText() + "Â§r");
            bookAuthor.requestFocus();
            author = bookAuthor.getText();
        } else if (addToPage.isSelected()) {
            //pageContents.insert("Â§r" , pageContents.getCaretPosition());
            pages.set(currentPage, pageContents.getText());
            pageContents.requestFocus();
        }
        colorButtonToggle.setSelected(false);
        //colorPanel.hide();
        repaint();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void colorButtonToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorButtonToggleActionPerformed
        if (colorButtonToggle.isSelected()) {
            //colorPanel.show();
        } else {
            //colorPanel.hide();
        }
        repaint();
        pageContents.requestFocus();
    }//GEN-LAST:event_colorButtonToggleActionPerformed

    private void addToTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToTitleActionPerformed
        if (addToTitle.isSelected()) {
            addToAuthor.setSelected(false);
            addToPage.setSelected(false);
        } else {
            addToAuthor.setSelected(true);
        }
    }//GEN-LAST:event_addToTitleActionPerformed

    private void addToAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToAuthorActionPerformed
        if (addToAuthor.isSelected()) {
            addToPage.setSelected(false);
            addToTitle.setSelected(false);
        } else {
            addToPage.setSelected(true);
        }
    }//GEN-LAST:event_addToAuthorActionPerformed

    private void addToPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToPageActionPerformed
        if (addToPage.isSelected()) {
            addToTitle.setSelected(false);
            addToAuthor.setSelected(false);
        } else {
            addToTitle.setSelected(true);
        }
    }//GEN-LAST:event_addToPageActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
            String url = "http://bugreport.challengercity.com/";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        //loadButton.setVisible(false);
        PasteFrame pasteFrame = new PasteFrame(this);
        pasteFrame.setVisible(true);
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void saveBookMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBookMenuItemActionPerformed
        
        JFileChooser fileSave= !prefs.get("lastDir", "").equals("")? // If node "lastDir" is not empty, then use the node, otherwise, use default dir
                new javax.swing.JFileChooser(prefs.get("lastDir", "")):
                new javax.swing.JFileChooser();
        fileSave.addChoosableFileFilter(new BookFileFilter());
        fileSave.setMultiSelectionEnabled(false); 
        fileSave.showSaveDialog(this);
        File file = fileSave.getSelectedFile();
        prefs.put("lastDir", file.getPath());
        if (!file.toString().endsWith(".mcbook")) {
            file = new File(file + ".mcbook");
        }
        System.out.println("Creating: "+file.getAbsolutePath());
        try {
            FileOutputStream fos = new FileOutputStream(file);
            OutputStreamWriter osw = new OutputStreamWriter(fos, "UTF-8");
            osw.write("Titleâ"+bookTitle.getText()+"\n"); // â = [ALT]+[J]
            osw.write("Authorâ"+bookAuthor.getText()+"\n");
            for (String page : pages) {
                osw.write("Pageâ"+page+"\n");
            }
            osw.write("Endâ");
            osw.close();
            fos.close();
        } catch (Exception ex) {
            System.out.println("Could not write all contents to book");
        }
        
    }//GEN-LAST:event_saveBookMenuItemActionPerformed

    private void loadBookMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBookMenuItemActionPerformed
        saveMenuItem.setEnabled(false);
        saveBookMenuItem.setEnabled(true);
        exportMenuItem.setEnabled(true);
        //loadButton.hide();
        repaint();
        
        JFileChooser fileLoad = !prefs.get("lastDir", "").equals("")? // If node "lastDir" is not empty, then use the node, otherwise, use default dir
                new javax.swing.JFileChooser(prefs.get("lastDir", "")):
                new javax.swing.JFileChooser();
        fileLoad.addChoosableFileFilter(new BookFileFilter());
        fileLoad.setMultiSelectionEnabled(false); 
        fileLoad.showOpenDialog(this);
        
        if (fileLoad.getSelectedFile() != null) {
            try {
                textFileBook = true;
                updateTextFileBookIcon();
                pages.clear();
                currentPage = 0;
                openFile = fileLoad.getSelectedFile();
                prefs.put("lastDir", openFile.getPath());
                FileInputStream fis = new FileInputStream(fileLoad.getSelectedFile());
                InputStreamReader in = new InputStreamReader(fis, "UTF-8");
                BufferedReader bsr = new BufferedReader(in);
                int currentLine = 1;
                int pageToBeRead = -1;
                
                while (true) {
                    String lineToRead = bsr.readLine();
                    String[] lineContents = lineToRead.split("â");
                    if (lineContents[0].equals("Title")) {
                        if (lineContents.length>1) {
                            bookTitle.setText(lineContents[1]);
                            title = lineContents[1];
                        }
                    } else if (lineContents[0].equals("Author")) {
                        if (lineContents.length>1) {
                            bookAuthor.setText(lineContents[1]);
                            author = lineContents[1];
                        }
                    } else if (lineContents[0].equals("Page")) {
                        if (lineContents.length>1) {
                            pages.add(lineContents[1]);
                        } else {
                            pages.add("");
                        }
                        pageToBeRead++;
                    } else if (lineContents[0].equals("End") || currentLine >= 1000) {
                        updatePageNumber();
                        updatePageText();
                        pageContents.requestFocus();
                        break;
                    } else {
                        pages.set(pageToBeRead, pages.get(pageToBeRead)+"\n"+lineContents[0]);
                    }
                    currentLine++;
                }
                bsr.close();
                in.close();
                fis.close();
            } catch (Exception ex) {
                System.out.println("Could not read all contents to editor");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_loadBookMenuItemActionPerformed

    private void exportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItemActionPerformed
        exportBook();
    }//GEN-LAST:event_exportMenuItemActionPerformed

    private void removePageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePageButtonActionPerformed
        if (pages.size()>1) {
            pages.remove(currentPage);
            if (currentPage >= pages.size()) {
                currentPage = pages.size()-1;
            }
            updatePageNumber();
            updatePageText();
        }
        pageContents.requestFocus();
    }//GEN-LAST:event_removePageButtonActionPerformed

    private void newBookMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBookMenuItemActionPerformed
        clear(true);
        textFileBook = true;
        saveMenuItem.setEnabled(false);
        exportMenuItem.setEnabled(true);
        saveBookMenuItem.setEnabled(true);
        //loadButton.hide();
        repaint();
        updateTextFileBookIcon();
    }//GEN-LAST:event_newBookMenuItemActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        aboutDialogTitleLabel.setText("About Revise v"+version);
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            String url = "http://themclibrary.challengercity.com/";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        
        // Get Book Contents
        String bookText = title+"\nby"+author+"\n-----\n\n";
        for (String page:pages) {
            bookText = bookText+""+page;
        }
        
        // Export to Clipboard
        java.awt.datatransfer.StringSelection ss = new java.awt.datatransfer.StringSelection(bookText);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
        
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void clientPasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientPasteMenuItemActionPerformed
        ClientPasterFrame pasteFrame = new ClientPasterFrame(this);
        pasteFrame.setVisible(true);
    }//GEN-LAST:event_clientPasteMenuItemActionPerformed

    private void ingameToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingameToggleActionPerformed
        if (ingameToggle.isSelected()) {
            ingameToggle.setToolTipText("Unsigned - Ingame editable");
        } else {
            ingameToggle.setToolTipText("Signed - Not ingame editable");
        }
    }//GEN-LAST:event_ingameToggleActionPerformed

    private void findMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuItemActionPerformed
        // TODO Work on the finding method
    }//GEN-LAST:event_findMenuItemActionPerformed

    private void aboutDialogWebButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutDialogWebButtonActionPerformed
        try {
            String url = "http://www.minecraftforum.net/topic/1202590-revise-edit-signed-books-w-more-options-all-os-12w17a/";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_aboutDialogWebButtonActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        if (mcr) {
            mcr = false;
        } else {
            mcr = true;
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed
    
    public void exportBook() {
        ExportBookFrame exportFrame = new ExportBookFrame(this);
        exportFrame.setVisible(true);
    }
    
    private class BookFileFilter extends FileFilter {

            public boolean accept(File file) {
                    if (file.isDirectory()) {
                            return true;
                    }
                    return file.getName().endsWith(".mcbook");
            }

            public String getDescription() {
                    return "Revise-Book (*.mcbook) files";
            }
    }
    
    public void addColor(String newColor) {
        if (addToTitle.isSelected()) {
            bookTitle.setText(bookTitle.getText() + "Â§" + newColor);
            bookTitle.requestFocus();
            title = bookTitle.getText();
        } else if (addToAuthor.isSelected()) {
            bookAuthor.setText(bookAuthor.getText() + "Â§" + newColor);
            bookAuthor.requestFocus();
            author = bookAuthor.getText();
        } else if (addToPage.isSelected()) {
            //pageContents.insert("Â§" + newColor, pageContents.getCaretPosition());
            pages.set(currentPage, pageContents.getText());
            pageContents.requestFocus();
        }
        colorButtonToggle.setSelected(false);
        //colorPanel.hide();
        repaint();
    }
    
    public void updateCharacterCount() {
        if (!mcr) {
            if (MeasuringUtl.getMcCodeLength(pageContents.getText()) > MeasuringUtl.getFormattedPageLength(pageContents.getText())) {
                limitLabel.setText(pageContents.getText().length() + " Char.   "+(MeasuringUtl.getMcCodeLength(pageContents.getText())-MeasuringUtl.getFormattedPageLength(pageContents.getText()))+" Over");
            } else if (pageContents.getText().length() > 256) {
                limitLabel.setText(pageContents.getText().length() + " Char.   "+(pageContents.getText().length()-256)+" Over");
            } else {
                limitLabel.setText(pageContents.getText().length() + " Char.");
            }
        } else {
            // TODO Check restraints
            limitLabel.setText(MeasuringUtl.checkMCRestraints(pages, currentPage));
        }
        
//        if (pageContents.getText().length() > 256) {
//            limitLabel.setText(pageContents.getText().length() + " Char. "+(pageContents.getText().length()-256)+" Over");
//        } else if (pageContents.getLineCount() > 13) {
//            limitLabel.setText("Too Many Lines");
//        //} else if () { // Complicated line calculations
//            
//        } else {
//            limitLabel.setText(pageContents.getText().length() + " Char.");
//        }
    }
    
    public void updatePageNumber() {
        // Change Page Number Display
        pageNumber.setText("Page " + (currentPage+1) + " of " + pages.size());
        
        // Fix Arrows
        if (currentPage == 0) {
            previousPage.hide();
        } else {
            previousPage.show();
        }
        repaint();
    }
    
    public void updatePageText() {
        pageContents.setText(pages.get(currentPage));
        updateCharacterCount();
    }
    
    public void updateTextBoxes() {
        bookTitle.setText(title);
        bookAuthor.setText(author);
        setTitle("Revise - " + title);
    }
    
    public void updateTextFileBookIcon() {
        if (textFileBook) {
            textFileBookIcon.show();
        } else {
            textFileBookIcon.hide();
        }
        repaint();
    }
    
    private void checkSaveOverwrite() {
        long datetime = openFile.lastModified();
        java.util.Date lastDate = new java.util.Date(datetime);
        if (loadDate.before(lastDate)) {
            System.out.println("Do you wish to overwrite the new file?");
            OverwriteInventoryFrame overwriteFrame = new OverwriteInventoryFrame(this);
            overwriteFrame.setVisible(true);
        } else {
            save();
        }
    }
    
    public void save() {
        NBTTagList invTag = playerCompound.getTagList("Inventory"); // Load Inventory

        NBTTagList newInv = new NBTTagList(); // Create new inventory tag

        for (int i = 0; i < invTag.tagCount(); i++) { // Look for books
            NBTTagCompound itemTag = (NBTTagCompound) invTag.tagAt(i); // Get the item in the current slot

            if (itemTag.getByte("Slot") == bookSlot) { // If it's a book
                NBTTagCompound innerBookTag = (NBTTagCompound) itemTag.getCompoundTag("tag"); // Load Inner Book
                if (ingameToggle.isSelected()) { // If ingame has been selected
                    itemTag.setShort("id", (short) 386); // Set the ingame book to an editable book
                } else {
                    itemTag.setShort("id", (short) 387);
                }
                if (itemTag.getShort("id") == 387) {
                    innerBookTag.setString("title", title); // Set the title
                    innerBookTag.setString("author", author); // Set the author
                }
                NBTTagList newPages = new NBTTagList(); // Create a new Pages List

                for (int j = 0; j < pages.size(); j++) { // For all the pages
                    if (pages.get(j) != null && !pages.get(j).equals("")) { // If they are not empty
                        newPages.appendTag(new NBTTagString("" + j, pages.get(j))); // Set them to what's loaded in the editor
                    }
                }
                if(pages.size() == 0) {
                    newPages.appendTag(new NBTTagString("0", " "));
                }
                innerBookTag.setTag("pages", newPages); // Overwrite the old pages with the new pages

            } // End if book
            newInv.appendTag(itemTag); // Add the item, may be changed, to the new inventory
        } // End inventory scan
        playerCompound.setTag("Inventory", newInv); // Overwrite Inventory
        
        if (ssp) {
            NBTTagCompound dataTag = levelCompound.getCompoundTag("Data"); // Load Data Tag
            dataTag.setTag("Player", playerCompound); // Overwrite Player Compound
            levelCompound.setTag("Data", dataTag); // Overwrite Data Tag
        }


        // Save the edited dataTag
        try {
            System.out.println("File: " + openFile); // Print file address
            FileOutputStream fileoutputstream = new FileOutputStream(openFile);
            if (ssp) {
            CompressedStreamTools.writeCompressed(levelCompound, fileoutputstream);
            } else {
            CompressedStreamTools.writeCompressed(playerCompound, fileoutputstream);
            }
            fileoutputstream.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        java.util.Calendar cal = java.util.Calendar.getInstance();
        loadDate = cal.getTime();
    }
    
    public void enableSave() {
        saveMenuItem.setEnabled(true);
        exportMenuItem.setEnabled(true);
    }
    
    public void clear(boolean newBook) {
        title = "Untitled";
        author = "Anonymous";
        pages.clear();
        if (newBook) {
            pages.add("");
            currentPage = 0;
            updatePageText();
            updatePageNumber();
            updateTextBoxes();
        } else {
            
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReviseMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReviseMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReviseMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReviseMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ReviseMain().setVisible(true);
            }
        });
    }
    
    private String version = "1.1.1";
    private boolean ingame = false;
    protected static FontMetrics metrics;
    private ImageIcon[] backgrounds;
    public boolean textFileBook;
    public java.util.Date loadDate;
    public int currentPage = 0;
    public String title = "Untitled";
    public String author = "Author";
    public boolean saved = false;
    public java.io.File openFile;
    public int bookSlot = 0;
    public boolean ssp;
    public boolean mcr = false;
    public java.util.prefs.Preferences prefs;
    public net.minecraft.src.NBTTagCompound playerCompound;
    public net.minecraft.src.NBTTagCompound levelCompound;
    public ArrayList<String> pages = new ArrayList<String>();
    public static Font mcFont;
    public static Font mcFont12;
    public static Font mcFont16;
    public static Font mcFont24;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JLabel aboutDialogBackgroundLabel;
    private javax.swing.JTextArea aboutDialogInfoTextArea;
    private javax.swing.JScrollPane aboutDialogScrollPane;
    private javax.swing.JLabel aboutDialogTitleLabel;
    private javax.swing.JButton aboutDialogWebButton;
    private javax.swing.JToggleButton addToAuthor;
    private javax.swing.JToggleButton addToPage;
    private javax.swing.JToggleButton addToTitle;
    private javax.swing.JLabel background;
    private javax.swing.JButton boldButton;
    private javax.swing.JTextField bookAuthor;
    private javax.swing.JTextField bookTitle;
    private javax.swing.JMenu clientMenu;
    private javax.swing.JMenuItem clientPasteMenuItem;
    private javax.swing.JToggleButton colorButtonToggle;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findMenuItem;
    private javax.swing.JMenu helpMenu;
    protected javax.swing.JToggleButton ingameToggle;
    private javax.swing.JButton italicButton;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JLabel limitLabel;
    private javax.swing.JMenuItem loadBookMenuItem;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuItem newBookMenuItem;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JButton nextPage;
    private javax.swing.JTextPane pageContents;
    private javax.swing.JLabel pageNumber;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JToggleButton playerToggle;
    private javax.swing.JButton previousPage;
    private javax.swing.JButton randomButton;
    private javax.swing.JButton removePageButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JMenuItem saveBookMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton strikeButton;
    private javax.swing.JLabel textFileBookIcon;
    private javax.swing.JButton underlineButton;
    // End of variables declaration//GEN-END:variables
}
