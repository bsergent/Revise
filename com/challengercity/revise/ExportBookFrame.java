/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.challengercity.revise;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import net.minecraft.src.*;

/**
 *
 * @author Ben
 */
public class ExportBookFrame extends javax.swing.JFrame {

    /**
     * Creates new form exportBookFrame
     */
    public ExportBookFrame(ReviseMain frame) {
        initComponents();
        myFrame = frame;
        sspScrollPane.hide();
        smpScrollPane.hide();
        exportBookButton.hide();
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        smpButton = new javax.swing.JButton();
        title1 = new javax.swing.JLabel();
        sspButton = new javax.swing.JButton();
        exportBookButton = new javax.swing.JButton();
        sspScrollPane = new javax.swing.JScrollPane();
        sspInstructions = new javax.swing.JTextArea();
        smpScrollPane = new javax.swing.JScrollPane();
        smpInstructions = new javax.swing.JTextArea();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Revise - Export Book");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(511, 308));
        setResizable(false);
        getContentPane().setLayout(null);

        smpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SMPButton.png"))); // NOI18N
        smpButton.setBorderPainted(false);
        smpButton.setContentAreaFilled(false);
        smpButton.setRolloverEnabled(true);
        smpButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SMPButtonH.png"))); // NOI18N
        smpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smpButtonActionPerformed(evt);
            }
        });
        getContentPane().add(smpButton);
        smpButton.setBounds(320, 140, 116, 112);

        title1.setFont(com.challengercity.revise.ReviseMain.mcFont24);
        title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title1.setText("Export Book to World");
        getContentPane().add(title1);
        title1.setBounds(40, 30, 440, 30);

        sspButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SSPButton.png"))); // NOI18N
        sspButton.setBorder(null);
        sspButton.setBorderPainted(false);
        sspButton.setContentAreaFilled(false);
        sspButton.setRolloverEnabled(true);
        sspButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SSPButtonH.png"))); // NOI18N
        sspButton.setSize(new java.awt.Dimension(100, 100));
        sspButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sspButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sspButton);
        sspButton.setBounds(90, 140, 100, 100);

        exportBookButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/ExportButton.png"))); // NOI18N
        exportBookButton.setBorder(null);
        exportBookButton.setBorderPainted(false);
        exportBookButton.setContentAreaFilled(false);
        exportBookButton.setRolloverEnabled(true);
        exportBookButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/ExportButtonS.png"))); // NOI18N
        exportBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBookButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exportBookButton);
        exportBookButton.setBounds(350, 220, 77, 20);

        sspScrollPane.setBackground(new java.awt.Color(250, 240, 214));
        sspScrollPane.setBorder(null);
        sspScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        sspInstructions.setBackground(new java.awt.Color(250, 240, 214));
        sspInstructions.setColumns(20);
        sspInstructions.setEditable(false);
        sspInstructions.setFont(com.challengercity.revise.ReviseMain.mcFont12);
        sspInstructions.setRows(5);
        sspInstructions.setText("Instructions:\n--Do these once you have clicked \"Export\"--\n1.) Open the folder with the same name as your \n     world\n2.) Select the file names \"level.dat\"\n3.) Click the \"Open\" button on the file selection\n     window");
        sspInstructions.setBorder(null);
        sspInstructions.setOpaque(false);
        sspInstructions.setSelectionColor(new java.awt.Color(124, 42, 42));
        sspScrollPane.setViewportView(sspInstructions);

        getContentPane().add(sspScrollPane);
        sspScrollPane.setBounds(50, 80, 410, 140);

        smpScrollPane.setBackground(new java.awt.Color(250, 240, 214));
        smpScrollPane.setBorder(null);
        smpScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        smpInstructions.setBackground(new java.awt.Color(250, 240, 214));
        smpInstructions.setColumns(20);
        smpInstructions.setEditable(false);
        smpInstructions.setFont(com.challengercity.revise.ReviseMain.mcFont12);
        smpInstructions.setRows(5);
        smpInstructions.setText("Instructions:\n--Do these once you have clicked \"Export\"--\n1.) Open the folder that your server is in\n2.) Open the world folder that the book is in\n3.) Open the folder labeled \"players\"\n4.) Selected the file that has the username of the\n        player you want to export to\n5.) Click \"Open\" in the file selection window");
        smpInstructions.setBorder(null);
        smpInstructions.setOpaque(false);
        smpInstructions.setSelectionColor(new java.awt.Color(124, 42, 42));
        smpScrollPane.setViewportView(smpInstructions);

        getContentPane().add(smpScrollPane);
        smpScrollPane.setBounds(50, 80, 410, 140);

        background.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SmallBookBackground.png"))); // NOI18N
        background.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(background);
        background.setBounds(0, 0, 580, 300);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void smpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smpButtonActionPerformed
        sspButton.hide();
        smpButton.hide();
        smpScrollPane.show();
        exportBookButton.show();
        repaint();
        exportssp = false;
    }//GEN-LAST:event_smpButtonActionPerformed

    private void sspButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sspButtonActionPerformed
        sspButton.hide();
        smpButton.hide();
        sspScrollPane.show();
        exportBookButton.show();
        repaint();
        exportssp = true;
    }//GEN-LAST:event_sspButtonActionPerformed

    private void exportBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBookButtonActionPerformed
        exportToWorld();
    }//GEN-LAST:event_exportBookButtonActionPerformed

    private void exportToWorld() {
        String os = System.getProperty("os.name");
        String defaultDir = "";
        if (exportssp) {
            if (os.equals("Mac OS X") || os.equals("Mac OS")) {
                defaultDir = "/Users/" + System.getProperty("user.name") + "/Library/Application Support/minecraft/saves";
            } else {
                defaultDir = "C:\\Users\\" + System.getProperty("user.name") + "\\AppData\\Roaming\\.minecraft\\saves";
            }
        }
        JFileChooser fileLoad = new JFileChooser(defaultDir);
        fileLoad.addChoosableFileFilter(new DatFileFilter()); // TODO Don't forget that the mainCompound will be an itemCompound when editing .books
        fileLoad.setMultiSelectionEnabled(false);
        fileLoad.showOpenDialog(this);
        
        if (fileLoad.getSelectedFile() != null) {
            net.minecraft.src.NBTTagCompound loadedTag = new net.minecraft.src.NBTTagCompound();
            
            try {
                FileInputStream fileinputstream = new FileInputStream(fileLoad.getSelectedFile());
                loadedTag = net.minecraft.src.CompressedStreamTools.readCompressed(fileinputstream); // Load Player
                fileinputstream.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            
            this.dispose();
            InvGUI invGUI = new InvGUI(myFrame, exportssp, loadedTag, fileLoad.getSelectedFile());
            invGUI.setVisible(true);
        } else {
            this.dispose();
        }
//
//        NBTTagList newInv = new NBTTagList(); // Create new inventory tag
//        byte[] usedSlots = new byte[36];
//        byte slotToUse = -1;
//
//        for (int i = 0; i < invTag.tagCount(); i++) { // Look for empty slots
//            NBTTagCompound itemTag = (NBTTagCompound) invTag.tagAt(i); // Get the item in the current slot
//            usedSlots[i] = itemTag.getByte("Slot");
//            for (byte ii = 0; ii < 36; ii++) { // Test Slot
//                for (byte iii = 0; iii < 36; iii++) { // Used Slot List
//                    if (ii != usedSlots[iii]) { // If current testing-slot is not in the used slot list
//                        slotToUse = ii; // Make that the slot to use
//                    }
//                }
//            }
//        }
//        
//        for (int i = 0; i < invTag.tagCount(); i++) { // Look for empty slots
//            NBTTagCompound itemTag = (NBTTagCompound) invTag.tagAt(i); // Get the item in the current slot
//            
//        }
//            
//            if (itemTag.getShort("id") == (short) 0 && firstEmpty) { // If it's empty and it's the first
//
//                NBTTagCompound innerBookTag = new NBTTagCompound();
//                NBTTagList pagesTag = new NBTTagList();
//
//                itemTag.setByte("Count", (byte) 1);
//                if (myFrame.ingameToggle.isSelected()) {
//                    itemTag.setShort("id", (short) 386);
//                } else {
//                    itemTag.setShort("id", (short) 387);
//                    innerBookTag.setString("author", myFrame.author);
//                    innerBookTag.setString("title", myFrame.title);
//                }
//                for (int j = 0; j < myFrame.pages.size(); j++) { // Set Pages
//                    NBTTagString newPage = new NBTTagString(myFrame.pages.get(j));
//                    pagesTag.setTag(newPage);
//                }
//                itemTag.setShort("Damage", (short) 0);
//                innerBookTag.setTag("pages", pagesTag); // Update the innerBookTag and pages
//                itemTag.setCompoundTag("tag", innerBookTag);
//                firstEmpty = false;
//
//            } // End if empty
//            newInv.setTag(itemTag); // Add the item, may be changed, to the new inventory
//        } // End inventory scan
//        playerTag.setTag("Inventory", newInv); // Update the old inventory
//
//        if (firstEmpty) {
//            title1.setText("No empty slots");
//        } else {
//            // Save the edited dataTag
//            try {
//                System.out.println("Exporting to File: " + fileLoad.getSelectedFile()); // Print file address
//                FileOutputStream fileoutputstream = new FileOutputStream(fileLoad.getSelectedFile());
//                CompressedStreamTools.writeGzippedCompoundToOutputStream(playerTag, fileoutputstream);
//                fileoutputstream.close();
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
//        }
    }
    
    private class DatFileFilter extends FileFilter {

            public boolean accept(File file) {
                    if (file.isDirectory()) {
                            return true;
                    }
                    return file.getName().endsWith(".dat");
            }

            public String getDescription() {
                    return "NBT (*.dat) files";
            }
    }
    
    /**
     * @param args the command line arguments
     */

    private ReviseMain myFrame;
    private boolean exportssp;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton exportBookButton;
    private javax.swing.JButton smpButton;
    private javax.swing.JTextArea smpInstructions;
    private javax.swing.JScrollPane smpScrollPane;
    private javax.swing.JButton sspButton;
    private javax.swing.JTextArea sspInstructions;
    private javax.swing.JScrollPane sspScrollPane;
    private javax.swing.JLabel title1;
    // End of variables declaration//GEN-END:variables
}
