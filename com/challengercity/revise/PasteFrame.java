/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.challengercity.revise;

import java.awt.datatransfer.*;
import java.awt.Toolkit;
import java.awt.FontMetrics;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.text.rtf.RTFEditorKit;
import javax.swing.text.Document;

/**
 *
 * @author Ben
 */
public class PasteFrame extends javax.swing.JFrame {

    /**
     * Creates new form pasteFrame
     */
    public PasteFrame(ReviseMain frame) {
        initComponents();
        myFrame = frame;
        jLabel2.hide();
        jLabel3.setVisible(false);
        pastingProgressBar.setVisible(false);
        //pageCreationBar.hide();
        repaint();
        metrics = this.getGraphics().getFontMetrics(myFrame.mcFont16);
        Transferable t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);

        try {
            if (t != null && t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                pasteInput.setText((String)t.getTransferData(DataFlavor.stringFlavor));
            } else {
                jLabel2.show();
                repaint();
            }
        } catch (Exception ex) {
            jLabel2.show();
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pastingProgressBar = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pasteInput = new javax.swing.JTextArea();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Revise - Smart Paster");
        setMinimumSize(new java.awt.Dimension(511, 652));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Minecraft", 0, 24)); // NOI18N
        jLabel1.setText("Smart Paster");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(50, 30, 192, 30);

        jLabel2.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jLabel2.setText("Press CTRL + V");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(50, 550, 110, 16);

        jLabel3.setFont(myFrame.mcFont12);
        jLabel3.setText("This may take a moment.");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(250, 40, 210, 16);
        getContentPane().add(pastingProgressBar);
        pastingProgressBar.setBounds(50, 570, 270, 20);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/PasteButton.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setRolloverEnabled(true);
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/PasteButtonS.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(330, 560, 100, 30);

        pasteInput.setBackground(new java.awt.Color(250, 240, 214));
        pasteInput.setColumns(20);
        pasteInput.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        pasteInput.setLineWrap(true);
        pasteInput.setRows(5);
        pasteInput.setTabSize(3);
        pasteInput.setWrapStyleWord(true);
        pasteInput.setOpaque(false);
        pasteInput.setSelectionColor(new java.awt.Color(124, 42, 42));
        jScrollPane1.setViewportView(pasteInput);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 60, 410, 490);

        background.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/BookBackground.png"))); // NOI18N
        background.setFocusable(false);
        background.setRequestFocusEnabled(false);
        background.setSize(new java.awt.Dimension(511, 630));
        getContentPane().add(background);
        background.setBounds(0, 0, 511, 630);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        pastingProgressBar.setVisible(true);
        jLabel3.setVisible(true);
        javax.swing.SwingUtilities.invokeLater(new ParserWorker());
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private ArrayList<String> wordArrayList = new ArrayList<String>();
    private FontMetrics metrics;
    private ReviseMain myFrame;
    
    private class ParserWorker extends javax.swing.SwingWorker<Void, Integer> {
        
        @Override
        public void done() {
            myFrame.updatePageNumber();
            myFrame.updatePageText();
            System.out.println("Finished");
            //frame.dispose();
        }

        @Override
        protected void process(List<Integer> list) {
            pastingProgressBar.setValue(list.get(list.size()-1));
            System.out.println("Progress:"+list.get(list.size()-1));
        }
        
        @Override
        public Void doInBackground() {
            // Formatting for pages code
            String pasteInputText = pasteInput.getText();
            pasteInputText = pasteInputText.replaceAll("¶", "");
            pasteInputText = pasteInputText.replaceAll("\n", " ");
            pasteInputText = pasteInputText.replaceAll("\t", " ");
            pasteInputText = pasteInputText.replaceAll("\r", "");
            pasteInputText = pasteInputText.replaceAll("∂", "");

            String[] wordArray = pasteInputText.split(" ");
            String workingPage = "";
            for (int i = 0; i < wordArray.length; i++) {
                wordArrayList.add(wordArray[i]);
            }

            for (int i = 0; i < wordArrayList.size(); i++) {
                if (!isCancelled()) {
                    if (MeasuringUtl.getMcCodeLength(workingPage + wordArrayList.get(i)) <= MeasuringUtl.getFormattedPageLength(workingPage + wordArrayList.get(i)) && (workingPage.length()+wordArrayList.get(i).length()) < 255) { // If it fits on ~one page
                        workingPage = workingPage + wordArrayList.get(i) + " "; // Add it to the working page

                        //System.out.println("Word Added - " + wordArrayList.get(i));
                    } else {
                        i--;
                        myFrame.pages.add(workingPage);
                        myFrame.updatePageNumber();
                        //System.out.println("New Page");
                        //System.out.println(workingPage);
                        workingPage = "";
                    }
                }
                this.setProgress(i*100/wordArrayList.size());
                System.out.println(i*100/wordArrayList.size());
                publish(i*100/wordArrayList.size()); // Update Progress Bar
            }
            myFrame.pages.add(workingPage);
            return null;
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea pasteInput;
    private javax.swing.JProgressBar pastingProgressBar;
    // End of variables declaration//GEN-END:variables
}
