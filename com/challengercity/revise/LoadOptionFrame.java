/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.challengercity.revise;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import java.io.*;
import java.awt.Font;
import java.util.ArrayList;
import net.minecraft.src.*;

/**
 *
 * @author Ben
 */
public class LoadOptionFrame extends javax.swing.JFrame {

    /**
     * Creates new form MultiSingleChoice
     */
    public LoadOptionFrame(ReviseMain frame) {
        initComponents();
        myFrame = frame;
        fileBrowserButton.hide();
        smpScrollPane.hide();
        sspScrollPane.hide();
        title2.hide();
        title3.hide();
        title4.hide();
        bookListScrollPane.hide();
        openBookButton.hide();
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title1 = new javax.swing.JLabel();
        title2 = new javax.swing.JLabel();
        title3 = new javax.swing.JLabel();
        title4 = new javax.swing.JLabel();
        sspButton = new javax.swing.JButton();
        smpButton = new javax.swing.JButton();
        openBookButton = new javax.swing.JButton();
        fileBrowserButton = new javax.swing.JButton();
        smpScrollPane = new javax.swing.JScrollPane();
        smpInstructions = new javax.swing.JTextArea();
        sspScrollPane = new javax.swing.JScrollPane();
        sspInstructions = new javax.swing.JTextArea();
        bookListScrollPane = new javax.swing.JScrollPane();
        bookList = new javax.swing.JList();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Revise - Open Book");
        setBounds(new java.awt.Rectangle(0, 22, 511, 308));
        setMaximumSize(new java.awt.Dimension(511, 308));
        setMinimumSize(new java.awt.Dimension(511, 308));
        setPreferredSize(new java.awt.Dimension(511, 308));
        setResizable(false);
        getContentPane().setLayout(null);

        title1.setFont(com.challengercity.revise.ReviseMain.mcFont24);
        title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title1.setText("Single-Player or Multi-Player");
        getContentPane().add(title1);
        title1.setBounds(40, 40, 440, 40);

        title2.setFont(com.challengercity.revise.ReviseMain.mcFont24);
        title2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title2.setText("Multi-Player Book Loader");
        getContentPane().add(title2);
        title2.setBounds(40, 40, 440, 40);

        title3.setFont(com.challengercity.revise.ReviseMain.mcFont24);
        title3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title3.setText("Single-Player Book Loader");
        getContentPane().add(title3);
        title3.setBounds(40, 40, 440, 40);

        title4.setFont(com.challengercity.revise.ReviseMain.mcFont24);
        title4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title4.setText("Pick a book.");
        getContentPane().add(title4);
        title4.setBounds(40, 40, 440, 40);

        sspButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SSPButton.png"))); // NOI18N
        sspButton.setBorder(null);
        sspButton.setBorderPainted(false);
        sspButton.setContentAreaFilled(false);
        sspButton.setRolloverEnabled(true);
        sspButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SSPButtonH.png"))); // NOI18N
        sspButton.setSize(new java.awt.Dimension(100, 100));
        sspButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sspButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sspButton);
        sspButton.setBounds(90, 140, 100, 100);

        smpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SMPButton.png"))); // NOI18N
        smpButton.setBorderPainted(false);
        smpButton.setContentAreaFilled(false);
        smpButton.setRolloverEnabled(true);
        smpButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SMPButtonH.png"))); // NOI18N
        smpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smpButtonActionPerformed(evt);
            }
        });
        getContentPane().add(smpButton);
        smpButton.setBounds(320, 140, 116, 112);

        openBookButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/OpenButton.png"))); // NOI18N
        openBookButton.setBorderPainted(false);
        openBookButton.setContentAreaFilled(false);
        openBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBookButtonActionPerformed(evt);
            }
        });
        getContentPane().add(openBookButton);
        openBookButton.setBounds(350, 220, 77, 32);

        fileBrowserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/OpenButton.png"))); // NOI18N
        fileBrowserButton.setBorderPainted(false);
        fileBrowserButton.setContentAreaFilled(false);
        fileBrowserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileBrowserButtonActionPerformed(evt);
            }
        });
        getContentPane().add(fileBrowserButton);
        fileBrowserButton.setBounds(350, 220, 77, 32);

        smpScrollPane.setBackground(new java.awt.Color(250, 240, 214));
        smpScrollPane.setBorder(null);
        smpScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        smpInstructions.setBackground(new java.awt.Color(250, 240, 214));
        smpInstructions.setColumns(20);
        smpInstructions.setEditable(false);
        smpInstructions.setFont(com.challengercity.revise.ReviseMain.mcFont12);
        smpInstructions.setRows(5);
        smpInstructions.setText("Instructions:\n--Do these once you have clicked \"Open\"--\n1.) Open the folder that your server is in\n2.) Open the world folder that the book is in\n3.) Open the folder labeled \"players\"\n4.) Selected the file that has the username of the\n        player with the book\n5.) Click \"Open\" in the file selection window");
        smpInstructions.setBorder(null);
        smpInstructions.setOpaque(false);
        smpInstructions.setSelectionColor(new java.awt.Color(124, 42, 42));
        smpScrollPane.setViewportView(smpInstructions);

        getContentPane().add(smpScrollPane);
        smpScrollPane.setBounds(50, 80, 410, 140);

        sspScrollPane.setBackground(new java.awt.Color(250, 240, 214));
        sspScrollPane.setBorder(null);
        sspScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        sspInstructions.setBackground(new java.awt.Color(250, 240, 214));
        sspInstructions.setColumns(20);
        sspInstructions.setEditable(false);
        sspInstructions.setFont(com.challengercity.revise.ReviseMain.mcFont12);
        sspInstructions.setRows(5);
        sspInstructions.setText("Instructions:\n--Do these once you have clicked \"Open\"--\n1.) Open the folder with the same name as your \n     world\n3.) Select file names \"level.dat\"\n4.) Click the \"Open\" button on the file selection\n     window");
        sspInstructions.setBorder(null);
        sspInstructions.setOpaque(false);
        sspInstructions.setSelectionColor(new java.awt.Color(124, 42, 42));
        sspScrollPane.setViewportView(sspInstructions);

        getContentPane().add(sspScrollPane);
        sspScrollPane.setBounds(50, 80, 410, 140);

        bookListScrollPane.setBackground(new java.awt.Color(250, 240, 214));
        bookListScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        bookList.setBackground(new java.awt.Color(250, 240, 214));
        bookList.setFont(com.challengercity.revise.ReviseMain.mcFont.deriveFont(16f));
        bookList.setModel(new BookListModel());
        bookList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        bookList.setSelectionBackground(new java.awt.Color(124, 42, 42));
        bookList.setSelectionForeground(new java.awt.Color(250, 240, 214));
        bookListScrollPane.setViewportView(bookList);

        getContentPane().add(bookListScrollPane);
        bookListScrollPane.setBounds(50, 80, 400, 140);

        background.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SmallBookBackground.png"))); // NOI18N
        background.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(background);
        background.setBounds(0, 0, 580, 300);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sspButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sspButtonActionPerformed
        sspButton.hide();
        smpButton.hide();
        fileBrowserButton.show();
        sspScrollPane.show();
        title3.show();
        title1.hide();
        repaint();
        ssp = true;
    }//GEN-LAST:event_sspButtonActionPerformed

    private void smpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smpButtonActionPerformed
        sspButton.hide();
        smpButton.hide();
        fileBrowserButton.show();
        smpScrollPane.show();
        title2.show();
        title1.hide();
        repaint();
        ssp = false;
    }//GEN-LAST:event_smpButtonActionPerformed

    private void fileBrowserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileBrowserButtonActionPerformed
        String os = System.getProperty("os.name");
        String defaultDir = "";
        if (ssp){
            if (os.equals("Mac OS X") || os.equals("Mac OS")) {
                defaultDir = "/Users/" + System.getProperty("user.name") + "/Library/Application Support/minecraft/saves";
            } else {
                defaultDir = "C:\\Users\\" + System.getProperty("user.name") + "\\AppData\\Roaming\\.minecraft\\saves";
            }
        }
        bookListScrollPane.show();
        title4.show();
        openBookButton.show();
        fileBrowserButton.hide();
        title3.hide();
        title2.hide();
        sspScrollPane.hide();
        smpScrollPane.hide();
        repaint();
        JFileChooser fileLoad = new JFileChooser(defaultDir);
        fileLoad.addChoosableFileFilter(new DatFileFilter());
        fileLoad.setMultiSelectionEnabled(false); 
        fileLoad.showOpenDialog(this);
        myFrame.openFile = fileLoad.getSelectedFile();
        loadFile(fileLoad.getSelectedFile());
        
        //fileLoad.getSelectedFile();
        java.util.Calendar cal = java.util.Calendar.getInstance();
        myFrame.loadDate = cal.getTime();
    }//GEN-LAST:event_fileBrowserButtonActionPerformed

    private void openBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBookButtonActionPerformed
        if (bookList.isSelectionEmpty()) {
            System.out.println("Nothing Selected!");
        } else {
            loadBook((NBTTagCompound) bookArrayList.get(bookList.getSelectedIndex()));
            myFrame.enableSave();
            myFrame.textFileBook = false;
            myFrame.updateTextFileBookIcon();
        }
    }//GEN-LAST:event_openBookButtonActionPerformed
    
    private class DatFileFilter extends FileFilter {

            public boolean accept(File file) {
                    if (file.isDirectory()) {
                            return true;
                    }
                    return file.getName().endsWith(".dat");
            }

            public String getDescription() {
                    return "NBT (*.dat) files";
            }
    }
    
    private void loadFile(File file) {
        try {
            myFrame.ssp = ssp;
            if (!ssp) {
                FileInputStream fileinputstream = new FileInputStream(file);
                NBTTagCompound playerTag = net.minecraft.src.CompressedStreamTools.readCompressed(fileinputstream); // Load Player
                fileinputstream.close();
                net.minecraft.src.NBTTagList invTag = playerTag.getTagList("Inventory"); // Load Inventory

                myFrame.playerCompound = playerTag; // Send the frame the full player tag for saving

                javax.swing.DefaultListModel listModel = (javax.swing.DefaultListModel) bookList.getModel(); // Add the List Model

                for (int i = 0; i < invTag.tagCount(); i++) { // Look for books
                    NBTTagCompound itemTag = (NBTTagCompound) invTag.tagAt(i);
                    if (itemTag.getShort("id") == 387) {
                        NBTTagCompound innerBookTag = (NBTTagCompound) itemTag.getCompoundTag("tag"); // Load Inner Book

                        if (!innerBookTag.getString("author").equals("")) {
                            listModel.addElement(innerBookTag.getString("title") + " by " + innerBookTag.getString("author"));
                        } else {
                            listModel.addElement(innerBookTag.getString("title"));
                        }
                        //itemTag.setCompoundTag("tag", innerBookTag);
                        bookArrayList.add(itemTag); // Add the list to bookArrayList

                        System.out.println("Signed Book. - " + innerBookTag.getString("title") + " by " + innerBookTag.getString("author")); // Print Book Title & Author
                    }
                    if (itemTag.getShort("id") == 386) {
                        NBTTagCompound innerBookTag = (NBTTagCompound) itemTag.getCompoundTag("tag"); // Load Inner Book

                        listModel.addElement("Untitled Book");

                        //itemTag.setCompoundTag("tag", innerBookTag);
                        bookArrayList.add(itemTag); // Add the list to bookArrayList
                        myFrame.bookSlot = itemTag.getByte("Slot"); // Give the slot number to the frame for saving

                        System.out.println("Unsigned Book.");
                    }
                }
            } else {
                FileInputStream fileinputstream = new FileInputStream(file);
                NBTTagCompound levelTag = net.minecraft.src.CompressedStreamTools.readCompressed(fileinputstream); // Load Level
                fileinputstream.close();
                myFrame.levelCompound = levelTag; // Send the frame the full level tag for saving
                
                NBTTagCompound dataTag = (NBTTagCompound) levelTag.getCompoundTag("Data"); // Load Data Tag
                NBTTagCompound playerTag = (NBTTagCompound) dataTag.getCompoundTag("Player"); // Load Player Tag
                myFrame.playerCompound = playerTag; // Send the frame the playerTag
                NBTTagList invTag = playerTag.getTagList("Inventory"); // Load Inventory

                javax.swing.DefaultListModel listModel = (javax.swing.DefaultListModel) bookList.getModel(); // Add the List Model

                for (int i = 0; i < invTag.tagCount(); i++) { // Look for books
                    NBTTagCompound itemTag = (NBTTagCompound) invTag.tagAt(i);
                    if (itemTag.getShort("id") == 387) {
                        NBTTagCompound innerBookTag = (NBTTagCompound) itemTag.getCompoundTag("tag"); // Load Inner Book

                        if (!innerBookTag.getString("author").equals("")) {
                            listModel.addElement(innerBookTag.getString("title") + " by " + innerBookTag.getString("author"));
                        } else {
                            listModel.addElement(innerBookTag.getString("title"));
                        }
                        //itemTag.setCompoundTag("tag", innerBookTag);
                        bookArrayList.add(itemTag); // Add the list to bookArrayList

                        System.out.println("Signed Book. - " + innerBookTag.getString("title") + " by " + innerBookTag.getString("author")); // Print Book Title & Author
                    }
                    if (itemTag.getShort("id") == 386) {
                        NBTTagCompound innerBookTag = (NBTTagCompound) itemTag.getCompoundTag("tag"); // Load Inner Book

                        listModel.addElement("Untitled Book");

                        //itemTag.setCompoundTag("tag", innerBookTag);
                        bookArrayList.add(itemTag); // Add the list to bookArrayList
                        myFrame.bookSlot = itemTag.getByte("Slot"); // Give the slot number to the frame for saving

                        System.out.println("Unsigned Book.");
                    }
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void loadBook(NBTTagCompound itemTag) { // Send book to frame
        NBTTagCompound innerBookTag = itemTag.getCompoundTag("tag");
        NBTTagList bookPagesTag = innerBookTag.getTagList("pages");
        
        myFrame.clear(false);
        
        if (itemTag.getShort("id") == 386) {
            myFrame.ingameToggle.setSelected(true);
        }
        
        for (int j = 0; j < bookPagesTag.tagCount(); j++) {
            NBTTagString page = (NBTTagString) bookPagesTag.tagAt(j);
            myFrame.pages.add(page.toString());
        }
        if (bookPagesTag.tagCount() == 0) {
            myFrame.pages.add(" ");
        }
        
        myFrame.bookSlot = itemTag.getByte("Slot");
        myFrame.title = innerBookTag.getString("title").toString();
        myFrame.author = innerBookTag.getString("author").toString();
        myFrame.updateTextBoxes();
        myFrame.updatePageNumber();
        myFrame.updatePageText();
        
        this.dispose();
    }
    
    public ReviseMain myFrame;
    public ArrayList<NBTTagCompound> bookArrayList = new ArrayList<NBTTagCompound>();
    private boolean ssp;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JList bookList;
    private javax.swing.JScrollPane bookListScrollPane;
    private javax.swing.JButton fileBrowserButton;
    private javax.swing.JButton openBookButton;
    private javax.swing.JButton smpButton;
    private javax.swing.JTextArea smpInstructions;
    private javax.swing.JScrollPane smpScrollPane;
    private javax.swing.JButton sspButton;
    private javax.swing.JTextArea sspInstructions;
    private javax.swing.JScrollPane sspScrollPane;
    private javax.swing.JLabel title1;
    private javax.swing.JLabel title2;
    private javax.swing.JLabel title3;
    private javax.swing.JLabel title4;
    // End of variables declaration//GEN-END:variables
}
