/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.challengercity.revise;

import java.awt.Toolkit;
import org.jnativehook.GlobalScreen;
import org.jnativehook.keyboard.*;
/**
 *
 * @author Ben
 */
public class ClientPasterFrame extends javax.swing.JFrame implements NativeKeyListener {

    
    
    /**
     * Creates new form ClientPasterFrame
     */
    public ClientPasterFrame(ReviseMain frame) {
        initComponents();
        myFrame = frame;
        pageLabel.setText("Page "+(page+1)+" of "+myFrame.pages.size());
        try {
            GlobalScreen.registerNativeHook();
            GlobalScreen.getInstance().addNativeKeyListener(this);
        } catch (Exception ex) { 
            instructionTextArea.setText("Could not register with Global Screen.");
        }
    }
    
    private void updateClipboard() {
        
        if (page < myFrame.pages.size()) {
            java.awt.datatransfer.StringSelection ss = new java.awt.datatransfer.StringSelection(myFrame.pages.get(page));
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
            pageLabel.setText("Page "+(page+1)+" of "+myFrame.pages.size());
            float progress = 0F;
            progress = ((page+1F)/myFrame.pages.size())*100F;
            pastingProgressBar.setValue((int)progress);
        }
        if (page >= myFrame.pages.size()-1) {
            instructionTextArea.setText("Finished Pasting");
            backButton.setVisible(false);
            pastingProgressBar.setVisible(false);
        }
    }
    
    public void nativeKeyTyped(org.jnativehook.keyboard.NativeKeyEvent evt) {
    }
    
    public void nativeKeyPressed(org.jnativehook.keyboard.NativeKeyEvent evt) {
        if (evt.getKeyCode() == org.jnativehook.keyboard.NativeKeyEvent.VK_V && evt.getModifiers() == 2) {
            updateClipboard();
            page++;
        }
    }
    
    public void nativeKeyReleased(org.jnativehook.keyboard.NativeKeyEvent evt) {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        instructionsPane = new javax.swing.JScrollPane();
        instructionTextArea = new javax.swing.JTextArea();
        pageLabel = new javax.swing.JLabel();
        pastingProgressBar = new javax.swing.JProgressBar();
        backButton = new javax.swing.JButton();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pasting to Minecraft");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(511, 308));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        titleLabel.setFont(com.challengercity.revise.ReviseMain.mcFont24);
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Pasting to MC");
        getContentPane().add(titleLabel);
        titleLabel.setBounds(50, 30, 400, 30);

        instructionsPane.setBackground(new java.awt.Color(251, 241, 217));
        instructionsPane.setBorder(null);

        instructionTextArea.setBackground(new java.awt.Color(251, 241, 217));
        instructionTextArea.setColumns(20);
        instructionTextArea.setEditable(false);
        instructionTextArea.setFont(com.challengercity.revise.ReviseMain.mcFont12);
        instructionTextArea.setRows(5);
        instructionTextArea.setText("1. Open Minecraft\n2. Load a world (single or multiplayer)\n3. Open a Book and Quill\n4. Press Ctrl+V\n5. Go to the next page\n6. Repeat steps 4-5 until the entire book is pasted");
        instructionTextArea.setBorder(null);
        instructionsPane.setViewportView(instructionTextArea);

        getContentPane().add(instructionsPane);
        instructionsPane.setBounds(70, 70, 360, 110);

        pageLabel.setFont(com.challengercity.revise.ReviseMain.mcFont12);
        pageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pageLabel.setText("Page # of #");
        getContentPane().add(pageLabel);
        pageLabel.setBounds(280, 226, 140, 20);

        pastingProgressBar.setOrientation(1);
        getContentPane().add(pastingProgressBar);
        pastingProgressBar.setBounds(430, 40, 20, 170);

        backButton.setText("Back a Page");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton);
        backButton.setBounds(50, 220, 117, 29);

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/challengercity/revise/resources/SmallBookBackground.png"))); // NOI18N
        getContentPane().add(backgroundLabel);
        backgroundLabel.setBounds(0, 0, 511, 288);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        GlobalScreen.unregisterNativeHook();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (page > 0) {
            page--;
        }
        updateClipboard();
    }//GEN-LAST:event_backButtonActionPerformed
    
    private int page = 0;
    public ReviseMain myFrame;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JTextArea instructionTextArea;
    private javax.swing.JScrollPane instructionsPane;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JProgressBar pastingProgressBar;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
